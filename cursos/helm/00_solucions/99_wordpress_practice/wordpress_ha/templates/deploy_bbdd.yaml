apiVersion: apps/v1
kind: Deployment
metadata:
  name:  deploy-{{ .Release.Name }}-mysql
  namespace: "{{ .Values.namespace }}"
  labels:
    app:  mysql-wordpress
spec:
  selector:
    matchLabels:
      app: mysql-wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app:  mysql-wordpress
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  mysql-wordpress
        image:  {{ .Values.images.mysql }}
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 20
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 15
        env:
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-{{ .Release.Name }}-configmap
              key: DB_BBDD
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-{{ .Release.Name }}-configmap
              key: DB_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: wordpress-{{ .Release.Name }}-configmap
              key: DB_PASSWORD
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-{{ .Release.Name }}-secret
              key: DB_PASSWORD
        
        ports:
        - containerPort:  3306
        volumeMounts:
        - name: volume-mysql-wordpress-app
          mountPath: /var/lib/mysql
          subPath: mysql

      volumes:
        - name: volume-mysql-wordpress-app
          persistentVolumeClaim:
            claimName: "{{ .Values.volumes.mysql }}"
      restartPolicy: Always